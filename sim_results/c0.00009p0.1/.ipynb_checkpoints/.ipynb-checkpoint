{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import matplotlib\n",
    "import numpy\n",
    "import numpy.random as npr\n",
    "from random import *\n",
    "#from matplotlib import *\n",
    "import csv\n",
    "import numpy as np\n",
    "from datetime import datetime\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "i = datetime.now()\n",
    "version = i.strftime('%Y%m%d %H%M%S')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#def save_result(matrice, parametres):\n",
    "#    filename = parametres\n",
    "#    print (filename)\n",
    "#    with open(filename, 'wb') as csvfile:\n",
    "#        tableau = matrice\n",
    "#        filename = csv.writer(csvfile, delimiter=';', quotechar='|', quoting=csv.QUOTE_MINIMAL)\n",
    "#        filename.writerows(tableau)\n",
    "\n",
    "def deriv_2(f, x, y, dx):\n",
    "    return (f(x+dx, y)-f(x, y))/dx\n",
    "\n",
    "def deriv_3(f, x, y, z, dx):\n",
    "    return (f(x+dx, y, z)-f(x, y, z))/dx\n",
    "\n",
    "def F(a, b):                             # point fixe avec et sans lansing b < d\n",
    "    u = 0\n",
    "    if a == 0:\n",
    "        u = b - 1\n",
    "    else:\n",
    "        u = ((1/a)*(1-np.exp(-a*b)))-1\n",
    "    return u\n",
    "\n",
    "def H(a,b,d):                           # point fixe sans lansing b > d\n",
    "    u = 0\n",
    "    if a == 0:\n",
    "        u = d - np.exp(d-b)\n",
    "    else:\n",
    "        u = ((1-np.exp(-a*d))/a) + (np.exp(d)/(1+a))*(np.exp(-d*(1+a))-np.exp(-b*(1+a)))-1\n",
    "    return u\n",
    "\n",
    "def G(a,d):                           # point fixe sans lansing b > d\n",
    "    u = 0\n",
    "    if a == 0:\n",
    "        u = d - 1\n",
    "    else:\n",
    "        u = ((1/a)*(1-np.exp(-a*d)))-1\n",
    "    return u\n",
    "\n",
    "\n",
    "\n",
    "##methode de newton sans effet lansing\n",
    "##renvoie la fitness associee au trait (b,d). x_{0}, epsilon, delta sont les parametres pour la methode de newton\n",
    "#x_0 initialisations (prendre 0.5 par exemple) et epsilon, delta a choisir petits\n",
    "def malthus_nl(b, d, x_0, epsilon, delta):\n",
    "    if b <= d:\n",
    "        u = x_0\n",
    "        while abs(F(u, b)) > epsilon:\n",
    "            u += - (F(u, b)/deriv_2(F, u, b, delta))\n",
    "        return u\n",
    "    else:\n",
    "        v = x_0\n",
    "        while abs(H(v, b, d)) > epsilon :\n",
    "            v += - (H(v, b, d)/deriv_3(H, v, b, d, delta))\n",
    "        return v\n",
    "\n",
    "\n",
    "\n",
    "#avec effet lansing\n",
    "def malthus_l(b, d, x_0, epsilon, delta):\n",
    "    if b <= d:\n",
    "        u = x_0\n",
    "        while abs(F(u, b)) > epsilon:\n",
    "            u += - (F(u, b) / deriv_2(F, u, b, delta))\n",
    "        return u\n",
    "    else:\n",
    "        v = x_0\n",
    "        while abs(G(v, d)) > epsilon:\n",
    "            v += - (G(v, d) / deriv_2(G, v, d, delta))\n",
    "        return v\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def save_result(matrice_pop):\n",
    "    filename = 'malthus.csv'\n",
    "    with open(filename, 'w') as csvfile:\n",
    "        colnames = ['time', 'lansing', 'no lansing']\n",
    "        tableau = numpy.vstack((colnames, matrice_pop))\n",
    "        filename = csv.writer(csvfile, delimiter=';', quotechar='|', quoting=csv.QUOTE_MINIMAL)\n",
    "        filename.writerows(tableau)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dynamique parametre malthusien moyen sur un ensemble de simu\n",
    "def dyn_malthus_glob(nombre_simu, nombre_instant, fichier):\n",
    "\n",
    "    H = [0] * nombre_simu\n",
    "    for y in range(nombre_simu):\n",
    "        r = numpy.genfromtxt(('%i' + fichier + '.csv') % (y), dtype=float, delimiter=';',\n",
    "                             names=True, )  # tableau excel -> tableau numpy\n",
    "        R = numpy.zeros((len(r), 7))  # tableau numpy de la population\n",
    "        for t in range(len(r)):\n",
    "            for j in range(7):\n",
    "                R[t, j] = r[t][j]\n",
    "        H[y] = R\n",
    "\n",
    "    a = numpy.sort(numpy.random.choice(R[1000:, 2], nombre_instant), axis=None)\n",
    "    malth = numpy.zeros((len(a), 3))\n",
    "    malth[:, 0] = a\n",
    "\n",
    "    for i in range(len(a)):\n",
    "\n",
    "        x = numpy.logical_and(H[0][:, 2] <= a[i], a[i] < H[0][:, 3])\n",
    "        xl = numpy.logical_and(x, H[0][:, 6] == 1)\n",
    "        xnl = numpy.logical_and(x, H[0][:, 6] == 0)\n",
    "\n",
    "        malth_lans = numpy.zeros(len(H[0][xl, 0]))\n",
    "        for j in range(len(malth_lans)):\n",
    "            malth_lans[j] = malthus_l(H[0][xl, 0][j], H[0][xl, 1][j], 0.5, 0.00001, 0.000001)\n",
    "        malth_lans = malth_lans[~numpy.isnan(malth_lans)]\n",
    "        malth_lans = malth_lans[~numpy.isinf(malth_lans)]\n",
    "        malth_lans = malth_lans[(malth_lans > 0)]\n",
    "\n",
    "        malth[i, 1] = numpy.mean(malth_lans)\n",
    "\n",
    "        malth_nolans = numpy.zeros(len(H[0][xnl, 0]))\n",
    "\n",
    "        for j in range(len(malth_nolans)):\n",
    "\n",
    "            malth_nolans[j] = malthus_nl(H[0][xnl, 0][j], H[0][xnl, 1][j], 0.5, 0.00001, 0.000001)\n",
    "\n",
    "        malth[i, 2] = numpy.mean(malth_nolans)\n",
    "\n",
    "        for y in range(nombre_simu):\n",
    "            print(y)\n",
    "            x = numpy.logical_and(H[y][:, 2] <= a[i], a[i] < H[y][:, 3])\n",
    "            xl = numpy.logical_and(x, H[y][:, 6] == 1)\n",
    "            xnl = numpy.logical_and(x, H[y][:, 6] == 0)\n",
    "\n",
    "            malth_lans = numpy.zeros(len(H[y][xl, 0]))\n",
    "            for j in range(len(malth_lans)):\n",
    "                malth_lans[j] = malthus_l(H[y][xl, 0][j], H[y][xl, 1][j], 0.5, 0.00001, 0.000001)\n",
    "            malth_lans = malth_lans[~numpy.isnan(malth_lans)]\n",
    "            malth_lans = malth_lans[~numpy.isinf(malth_lans)]\n",
    "            malth_lans = malth_lans[(malth_lans > 0)]\n",
    "            malth[i, 1] += numpy.mean(malth_lans)\n",
    "            malth_nolans = numpy.zeros(len(H[y][xnl, 0]))\n",
    "            for j in range(len(malth_nolans)):\n",
    "                malth_nolans[j] = malthus_nl(H[y][xnl, 0][j], H[y][xnl, 1][j], 0.5, 0.00001, 0.000001)\n",
    "            malth[i, 2] += numpy.mean(malth_nolans)\n",
    "\n",
    "\n",
    "        malth[i, 1] = malth[i, 1]/nombre_simu\n",
    "        malth[i, 2] = malth[i, 2]/nombre_simu\n",
    "\n",
    "    return(malth)\n",
    "    #print(malth)\n",
    "    #fig = plt.figure(figsize=(18, 18))\n",
    "    #fig.suptitle('', fontsize=35)\n",
    "    #fig.subplots_adjust(left=0.1, bottom=0.1, right=0.9, top=0.85, wspace=0.5, hspace=0.5)\n",
    "    #plt.subplot(111)\n",
    "    #plt.scatter(malth[:, 0], malth[:, 1], s=5, c='red', label='Population with Lansing effect', edgecolor='', alpha=1.0)\n",
    "    #plt.scatter(malth[:, 0], malth[:, 2], s=5, c='blue', label='Population without Lansing effect', edgecolor='',\n",
    "    #            alpha=1.0)\n",
    "    #plt.axis(\n",
    "    #    [0, max(malth[:, 0]) + 1, min(min(malth[:, 1]), min(malth[:, 2])), max(max(malth[:, 1]), max(malth[:, 2]))])\n",
    "    #plt.xlabel('time', fontsize=30)\n",
    "    #plt.ylabel('fitness', fontsize=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "A = dyn_malthus_glob(2, 5 , 'bmbdmvieil,1.51.31.50.82,c9e-05,p0.1,v0.05,ns200000,tp1000')\n",
    "print(A)\n",
    "save_result(A)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
